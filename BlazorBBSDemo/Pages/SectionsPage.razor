@page "/sectionpage"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.Net.Http.Json
@using Microsoft.JSInterop

<div class="top-bar">
    @if (LoginUser == null)
    {
        <span class="text" @onclick="Login">登录</span>
        <span>|</span>
        <span class="text" @onclick="Register">注册</span>
    }
    else
    {
        <span class="text" @onclick="() => NavigateToUserPage(LoginUser.Id)">@LoginUser.Username</span>
        <span>|</span>
        <span>积分：@LoginUser.Points</span>
        <span>|</span>
        <span class="text" @onclick="Logout">退出</span>
    }
</div>
<div id="areas">
    @foreach (var area in areas)
    {
        <div id="area">
            <div class="area-name">
                <hr class="solid-line">
                <p>
                    @area
                </p>
                <hr class="dashed-line">
            </div>
            <div class="area-content">
                @foreach (var section in sections.Where(s => s.Area == area))
                {
                    <div class="section">
                        <div class="section-image">
                            <img src=@(section.Icon) alt="section1" />
                        </div>
                        <div class="section-info">
                            <div class="section-name" @onclick="() => NavigateToPostList(section.Id)">
                                @(section.Name)
                            </div>
                            <p class=section-introduction>@(section.Description)</p>
                        </div>
                    </div>
                }
            </div>
            <hr class="solid-line">
        </div>
    }
</div>

<style>
    * {
        margin: 0;
        padding: 0;
        font-family: "Microsoft YaHei";
    }

    .top-bar {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        height: 36px;
        padding: 0 16px;
        background-color: #e5edf2;
    }

    .top-bar .text:hover {
        cursor: pointer;
        color: blue;
    }

    #areas {
        width: 90%;
        margin: auto;
        margin-top: 20px;
    }

    #areas #area .area-name p {
        text-align: left;
        padding-left: 10px;
        font-size: 24px;
        margin: 0;
    }

    #areas #area .area-content {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    #areas #area .area-content .section {
        display: flex;
        height: 100px;
        width: 30%;
        margin-top: 20px;
        box-shadow: 0 0 10px #666;
    }

    #areas #area .area-content .section .section-image {
        height: 100px;
        width: 100px;
    }

    #areas #area .area-content .section .section-image img {
        width: 100%;
        height: 100%;
        padding: 5px;
    }

    #areas #area .area-content .section .section-info .section-name {
        font-size: 20px;
    }

    #areas #area .area-content .section .section-info .section-introduction {
        font-size: 16px;
    }

    #areas #area .area-content .section .section-info .section-name:hover {
        cursor: pointer;
        color: blue;
    }

    .solid-line {
        border-top: 2px solid #666;
        margin: 0;
    }

    .dashed-line {
        border-top: 1px dashed #ccc;
        border-image: linear-gradient(to right, #ccc 10%, transparent 90%) 1;
        /* 设置虚线间隔 */
        margin: 0;
    }
</style>

@code {
    private List<string> areas = new List<string>();
    private List<Section> sections = new List<Section>();

    public class Section
    {
        public int Id { get; set; }
        public required string Area { get; set; }
        public required string Icon { get; set; }
        public required string Name { get; set; }
        public required string Description { get; set; }
    }

    private void Login()
    {
        NavigationManager.NavigateTo("/loginpage");
    }

    private void Register()
    {
        NavigationManager.NavigateTo("/registerpage");
    }

    private void Logout()
    {
        LoginUser = null;
        JSRuntime.InvokeVoidAsync("cookieHelper.deleteCookie", "userId");
        JSRuntime.InvokeVoidAsync("cookieHelper.deleteCookie", "AutoLoginToken");
        StateHasChanged();
    }

    private async Task LoadSections()
    {
        sections = await Http.GetFromJsonAsync<List<Section>>("http://localhost:5286/SectionApi/all") ?? new List<Section>();

        areas = sections.Select(s => s.Area).Distinct().ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserInfoByCookie();
        await LoadSections();
    }

    public UserBaseInfoResponse? LoginUser { get; set; }

    public class UserBaseInfoResponse
    {
        public int Id { get; set; }
        public required string Username { get; set; }
        public required string RegisterTime { get; set; }
        public int Points { get; set; }
    }

    private async Task GetUserInfoByCookie()
    {
        var userId = await JSRuntime.InvokeAsync<string>("cookieHelper.getCookie", "userId");
        if (!string.IsNullOrEmpty(userId))
        {
            LoginUser = await Http.GetFromJsonAsync<UserBaseInfoResponse>($"http://localhost:5286/LoginApi/baseinfo/{userId}");
        }
    }

    private void NavigateToPostList(int sectionId)
    {
        NavigationManager.NavigateTo($"/{sectionId}");
    }

    private void NavigateToUserPage(int userId)
    {
        NavigationManager.NavigateTo($"/userpage/{userId}");
    }
}